#!/usr/bin/env node

/* eslint-disable no-console */

const os = require('os');
const fs = require('fs');
const http = require('http');
const path = require('path');

const platform = os.platform();
const ProgressBar = require('progress');
const https = require('https');

const arch = os.arch();
const spawn = require('child_process').spawn;

// downloadUrl vars
let releasesUrl;
let server;
let fetch = https;
let version = require('../package.json').version;

if (process.env.SENTRY_LOCAL_DOWNLOAD_URL) {
  releasesUrl = process.env.SENTRY_LOCAL_DOWNLOAD_URL;
  version = 'DEV';
  fetch = http;
  server = http
    .createServer((request, response) => {
      response.writeHead(200, { 'Content-Type': 'application/octet-stream' });
      const contents = fs.readFileSync(
        path.join(__dirname, '../js/__mocks__/sentry-cli')
      );
      response.write(contents);
      response.end();
    })
    .listen(8999);
  console.log('TEST SERVERT started');
} else {
  releasesUrl = 'https://github.com/getsentry/sentry-cli/releases/download/';
}

const binaryPrefix = '/sentry-cli-';

// output vars
let outputPath;
if (platform === 'win32') {
  outputPath = `${__dirname}\\sentry-cli.exe`;
} else {
  outputPath = `${__dirname}/../sentry-cli`;
}

let downloadUrl = null;

// macOS
if (platform === 'darwin') {
  downloadUrl = `${releasesUrl + version + binaryPrefix}Darwin-x86_64`;
  // Windows
} else if (platform === 'win32') {
  downloadUrl = `${releasesUrl + version + binaryPrefix}Windows-i686.exe`;
  // Linux
} else if (arch.indexOf('64') > -1) {
  downloadUrl = `${releasesUrl + version + binaryPrefix}Linux-x86_64`;
} else {
  downloadUrl = `${releasesUrl + version + binaryPrefix}Linux-i686`;
}

if (downloadUrl === null) {
  console.log(
    `error: your platform and architecture (${platform}-${arch}) is unsupported.`
  );
  process.exit(1);
}

// Download the binary from the response
function downloadBinary(res) {
  const fn = downloadUrl.match(/.*\/(.*?)$/)[1];
  const total = parseInt(res.headers['content-length'], 10);
  let pct = -1;
  let downloaded = 0;
  let progress = null;
  let isYarn = false;
  if (process.stdout.isTTY) {
    progress = new ProgressBar(`fetching ${fn} :bar :percent :etas`, {
      complete: '█',
      incomplete: '░',
      width: 20,
      total,
    });
  } else if ((process.env.npm_config_user_agent || '').match(/yarn/)) {
    isYarn = true;
  }
  const download = fs.createWriteStream(outputPath, {
    mode: 0o0755,
  });
  res.pipe(download);
  res.on('data', chunk => {
    downloaded += chunk.length;
    if (process.stdout.isTTY) {
      progress.tick(chunk.length);
    } else if (isYarn) {
      const newPct = Math.round(downloaded / total * 100);
      if (newPct !== pct) {
        pct = newPct;
        process.stdout.write(`fetching ${fn} ${pct}%\n`);
      }
    }
  });
  download.on('error', err => {
    console.log(err);
    process.exit(1);
  });
  download.on('close', () => {
    let output = '';
    const child = spawn(outputPath, ['--version'], {
      stdio: ['pipe', 'pipe', process.stderr],
    });
    child.stdout.on('data', data => {
      output += data;
    });
    child.on('close', code => {
      if (code !== 0) {
        console.log('Something went wrong!');
        console.error(output);
        process.exit(1);
      } else {
        if (output.trim() !== `sentry-cli ${version}`) {
          console.error(
            `Warning! Unexpected sentry-cli version: ${
              output.trim().split(' ')[1]
            }, expected ${version}!`
          );
        }
        if (server) {
          server.close();
        }
        process.exit(0);
      }
    });
  });
}

// Count redirects, just in case we get a loop.
// Pretty sure this can't happen with the github releases URL
let redirectCt = 0;
function handleResponse(res) {
  if (res.statusCode === 302) {
    redirectCt += 1;
    if (redirectCt > 10) {
      console.log('error: Too many redirects!');
      process.exit(1);
    }
    fetch
      .get(res.headers.Location || res.headers.location, handleResponse)
      .on('error', err => {
        console.log(err);
        process.exit(1);
      });
  } else if (res.statusCode >= 200 && res.statusCode < 300) {
    downloadBinary(res);
  } else {
    console.log(`Received ${res.statusCode}: ${res.statusMessage}`);
    process.exit(1);
  }
}

function shouldDownloadScript() {
  return !fs.existsSync(outputPath);
}

// Start download
if (shouldDownloadScript()) {
  fetch.get(downloadUrl, handleResponse).on('error', err => {
    console.log(err);
    process.exit(1);
  });
} else if (server) {
  server.close();
}
