__d((function(g,r,i,a,m,e,d){function t(){var t=this.getScope().getSpan();return t?{'sentry-trace':t.toTraceparent()}:{}}function n(t,n,_){return r(d[0]).hasTracingEnabled(n)?void 0!==t.sampled?(t.setMetadata({sampleRate:Number(t.sampled)}),t):('function'==typeof n.tracesSampler?(o=n.tracesSampler(_),t.setMetadata({sampleRate:Number(o)})):void 0!==_.parentSampled?o=_.parentSampled:void 0!==n.tracesSampleRate?(o=n.tracesSampleRate,t.setMetadata({sampleRate:Number(o)})):(o=1,t.setMetadata({sampleRate:o})),s(o)?o?(t.sampled=Math.random()<o,t.sampled?(('undefined'==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&r(d[1]).logger.log(`[Tracing] starting ${t.op} transaction - ${t.name}`),t):(('undefined'==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&r(d[1]).logger.log(`[Tracing] Discarding transaction because it's not included in the random sample (sampling rate = ${Number(o)})`),t)):(('undefined'==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&r(d[1]).logger.log("[Tracing] Discarding transaction because "+('function'==typeof n.tracesSampler?'tracesSampler returned 0 or false':'a negative sampling decision was inherited or tracesSampleRate is set to 0')),t.sampled=!1,t):(('undefined'==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&r(d[1]).logger.warn('[Tracing] Discarding transaction because of invalid sample rate.'),t.sampled=!1,t)):(t.sampled=!1,t);var o}function s(t){return r(d[1]).isNaN(t)||'number'!=typeof t&&'boolean'!=typeof t?(('undefined'==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&r(d[1]).logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be a boolean or a number between 0 and 1. Got ${JSON.stringify(t)} of type ${JSON.stringify(typeof t)}.`),!1):!(t<0||t>1)||(('undefined'==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&r(d[1]).logger.warn(`[Tracing] Given sample rate is invalid. Sample rate must be between 0 and 1. Got ${t}.`),!1)}function _(t,s){var _=this.getClient(),o=_&&_.getOptions()||{},p=o.instrumenter||'sentry',l=t.instrumenter||'sentry';p!==l&&(('undefined'==typeof __SENTRY_DEBUG__||__SENTRY_DEBUG__)&&r(d[1]).logger.error(`A transaction was started with instrumenter=\`${l}\`, but the SDK is configured with the \`${p}\` instrumenter.\nThe transaction will not be sampled. Please use the ${p} instrumentation to start transactions.`),t.sampled=!1);var c=new(r(d[2]).Transaction)(t,this);return(c=n(c,o,Object.assign({parentSampled:t.parentSampled,transactionContext:t},s))).sampled&&c.initSpanRecorder(o._experiments&&o._experiments.maxSpans),_&&_.emit&&_.emit('startTransaction',c),c}Object.defineProperty(e,'__esModule',{value:!0}),e.addTracingExtensions=function(){var n=r(d[4]).getMainCarrier();n.__SENTRY__&&(n.__SENTRY__.extensions=n.__SENTRY__.extensions||{},n.__SENTRY__.extensions.startTransaction||(n.__SENTRY__.extensions.startTransaction=_),n.__SENTRY__.extensions.traceHeaders||(n.__SENTRY__.extensions.traceHeaders=t),r(d[5]).registerErrorInstrumentation())},e.startIdleTransaction=function(t,s,_,o,p,l,c){var u=t.getClient(),S=u&&u.getOptions()||{},E=new(r(d[3]).IdleTransaction)(s,t,_,o,c,p);return(E=n(E,S,Object.assign({parentSampled:s.parentSampled,transactionContext:s},l))).sampled&&E.initSpanRecorder(S._experiments&&S._experiments.maxSpans),u&&u.emit&&u.emit('startTransaction',E),E}}),484,[485,426,491,496,486,497]);