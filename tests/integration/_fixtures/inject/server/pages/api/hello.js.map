{"version":3,"file":"../pages/api/hello.js","mappings":";;;;;;;;;;AAAA;;;;;;;;;;;;;;;;ACAA;AAOe,SAASA,OAAAA,CACtBC,GAAmB,EACnBC,GAA0B,EAC1B;AACA,UAAMC,OAAOC,mBAAQ;AACrBC,IAAAA,OAAAA,CAAQC,GAAG,CAACH,IAAAA,CAAAA,CAAAA;AACZD,IAAAA,GAAAA,CAAIK,MAAM,CAAC,GAAKC,CAAAA,CAAAA,IAAI,CAAC;QAAEC,IAAM;AAAW;AAC1C;;;;;;;ACVA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAM,aAAa,GAAG,UAAU,EAAE;AAClC;AACA;AACA;AACA,IAAI,mBAAmB,GAAG,SAAS,CAAC;AACpC;AACA,IAAI,SAAS,IAAI,aAAa,IAAI,OAAO,aAAa,CAAC,OAAO,KAAK,UAAU,EAAE;AAC/E;AACA,EAAE,mBAAmB,GAAG,aAAa,CAAC,OAAO,CAAC;AAC9C,CAAC,MAAM,IAAI,OAAO,aAAa,KAAK,UAAU,EAAE;AAChD;AACA,EAAE,mBAAmB,GAAG,aAAa,CAAC;AACtC,CAAC;AACD;AACA,MAAM,UAAU,GAAG,aAAa,CAAC,MAAM,IAAI,EAAE,CAAC;AAC9C;AACA;AACA;AACA;AACA;AACK,MAAC,MAAM,GAAG;AACf,EAAE,GAAG,UAAU;AACf,EAAE,GAAG,EAAE;AACP,IAAI,GAAG,UAAU,CAAC,GAAG;AACrB,IAAI,gBAAgB,EAAE,IAAI;AAC1B,GAAG;AACH,EAAE;AACF;AACK,MAAC,kBAAkB,GAAG,mBAAmB,GAAG,oEAA+B,CAAC,mBAAmB,EAAE,YAAY,CAAC,GAAG;;;;;;;;;;;;ACxCtH,IAAIC,mCAAmC,gBAAkB,cAAcC,SAASC,MAAM;AACtFF,gCAAgC,CAAC,+BAA+B,GAAG;AACnEA,gCAAgC,CAAC,iBAAiB,GAAG;IAAC,MAAK;AAAuB;AAClFA,gCAAgC,CAAC,2BAA2B,GAAG;AAEtB;AAEzCG,gDAAW,CAAC;IACVE,KAAK;IACL,0EAA0E;IAC1E,oBAAoB;IACpBC,kBAAkB;IAClB,MAAM;IACN,0EAA0E;IAC1E,2EAA2E;IAC3E,qDAAqD;IACrDC,OAAO,IAAI;IACX,2BAA2B;IAC3BC,aAAaC,QAAQC,GAAG,CAACC,MAAM,GAAG,WAAW,OAAO;IAEpDC,YAAY,CAACC,QAAU;QACrBlB,QAAQC,GAAG,CAACiB;QACZ,OAAOA;IACT;AACF","sources":["webpack://sentry-nextjs-vercel-testproject/external commonjs \"@sentry/nextjs\"","webpack://sentry-nextjs-vercel-testproject/pages/api/hello.ts","webpack://sentry-nextjs-vercel-testproject/sentry-wrapper-module","webpack://sentry-nextjs-vercel-testproject/./sentry.server.config.js"],"sourcesContent":["module.exports = require(\"@sentry/nextjs\");","// Next.js API route support: https://nextjs.org/docs/api-routes/introduction\nimport type { NextApiRequest, NextApiResponse } from \"next\";\n\ntype Data = {\n  name: string;\n};\n\nexport default function handler(\n  req: NextApiRequest,\n  res: NextApiResponse<Data>\n) {\n  const grpc = require(\"@sentry/nextjs\");\n  console.log(grpc);\n  res.status(200).json({ name: \"John Doe\" });\n}\n","import * as origModule from '__SENTRY_WRAPPING_TARGET_FILE__.cjs';\nexport * from '__SENTRY_WRAPPING_TARGET_FILE__.cjs';\nimport * as Sentry from '@sentry/nextjs';\n\n/*\n * This file is a template for the code which will be substituted when our webpack loader handles API files in the\n * `pages/` directory.\n *\n * We use `__SENTRY_WRAPPING_TARGET_FILE__.cjs` as a placeholder for the path to the file being wrapped. Because it's not a real package,\n * this causes both TS and ESLint to complain, hence the pragma comments below.\n */\n\nconst userApiModule = origModule ;\n\n// Default to undefined. It's possible for Next.js users to not define any exports/handlers in an API route. If that is\n// the case Next.js wil crash during runtime but the Sentry SDK should definitely not crash so we need tohandle it.\nlet userProvidedHandler = undefined;\n\nif ('default' in userApiModule && typeof userApiModule.default === 'function') {\n  // Handle when user defines via ESM export: `export default myFunction;`\n  userProvidedHandler = userApiModule.default;\n} else if (typeof userApiModule === 'function') {\n  // Handle when user defines via CJS export: \"module.exports = myFunction;\"\n  userProvidedHandler = userApiModule;\n}\n\nconst origConfig = userApiModule.config || {};\n\n// Setting `externalResolver` to `true` prevents nextjs from throwing a warning in dev about API routes resolving\n// without sending a response. It's a false positive (a response is sent, but only after we flush our send queue), and\n// we throw a warning of our own to tell folks that, but it's better if we just don't have to deal with it in the first\n// place.\nconst config = {\n  ...origConfig,\n  api: {\n    ...origConfig.api,\n    externalResolver: true,\n  },\n};\n\nconst apiWrapperTemplate = userProvidedHandler ? Sentry.wrapApiHandlerWithSentry(userProvidedHandler, '/api/hello') : undefined;\n\nexport { config, apiWrapperTemplate as default };\n","var _sentryCollisionFreeGlobalObject = typeof window === \"undefined\" ? global : window;\n_sentryCollisionFreeGlobalObject[\"__sentryRewritesTunnelPath__\"] = \"/test\";\n_sentryCollisionFreeGlobalObject[\"SENTRY_RELEASE\"] = {\"id\":\"H7WYeNZ2HObPMd59_6n2m\"};\n_sentryCollisionFreeGlobalObject[\"__rewriteFramesDistDir__\"] = \".next\";\n\nimport * as Sentry from \"@sentry/nextjs\";\n\nSentry.init({\n  dsn: \"https://5ca6c435afc347aaa9a5e6fe9113c11f@o1163812.ingest.sentry.io/6762530\",\n  // We recommend adjusting this value in production, or using tracesSampler\n  // for finer control\n  tracesSampleRate: 1,\n  // ...\n  // Note: if you want to override the automatic release value, do not set a\n  // `release` value here - use the environment variable `SENTRY_RELEASE`, so\n  // that it will also get attached to your source maps\n  debug: true,\n  // release: \"23.01.2023.6\",\n  environment: process.env.VERCEL ? \"vercel\" : \"local\",\n\n  beforeSend: (event) => {\n    console.log(event);\n    return event;\n  },\n});\n"],"names":["handler","req","res","grpc","require","console","log","status","json","name","_sentryCollisionFreeGlobalObject","global","window","Sentry","init","dsn","tracesSampleRate","debug","environment","process","env","VERCEL","beforeSend","event"],"sourceRoot":""}